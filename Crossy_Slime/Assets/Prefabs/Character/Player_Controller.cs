/*------------------------------------------------------------------------------
 <auto-generated>
     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
     version 1.14.2
     from Assets/Prefabs/Character/Player_Controller.inputactions

     Changes to this file may cause incorrect behavior and will be lost if
     the code is regenerated.
 </auto-generated>
------------------------------------------------------------------------------
*/
using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

/* 
 <summary>
 Provides programmatic access to <see cref="InputActionAsset" />, <see cref="InputActionMap" />, <see cref="InputAction" /> and <see cref="InputControlScheme" /> instances defined in asset "Assets/Prefabs/Character/Player_Controller.inputactions".
 </summary>
 <remarks>
 This class is source generated and any manual edits will be discarded if the associated asset is reimported or modified.
 </remarks>
 <example>
 <code>
 using namespace UnityEngine;
 using UnityEngine.InputSystem;

 // Example of using an InputActionMap named "Player" from a UnityEngine.MonoBehaviour implementing callback interface.
 public class Example : MonoBehaviour, MyActions.IPlayerActions
 {
     private MyActions_Actions m_Actions;                  // Source code representation of asset.
     private MyActions_Actions.PlayerActions m_Player;     // Source code representation of action map.

     void Awake()
     {
         m_Actions = new MyActions_Actions();              // Create asset object.
         m_Player = m_Actions.Player;                      // Extract action map object.
         m_Player.AddCallbacks(this);                      // Register callback interface IPlayerActions.
     }

     void OnDestroy()
     {
         m_Actions.Dispose();                              // Destroy asset object.
     }

     void OnEnable()
     {
         m_Player.Enable();                                // Enable all actions within map.
     }

     void OnDisable()
     {
         m_Player.Disable();                               // Disable all actions within map.
     }

     #region Interface implementation of MyActions.IPlayerActions

     // Invoked when "Move" action is either started, performed or canceled.
     public void OnMove(InputAction.CallbackContext context)
     {
         Debug.Log($"OnMove: {context.ReadValue&lt;Vector2&gt;()}");
     }

     // Invoked when "Attack" action is either started, performed or canceled.
     public void OnAttack(InputAction.CallbackContext context)
     {
         Debug.Log($"OnAttack: {context.ReadValue&lt;float&gt;()}");
     }

     #endregion
 }
 </code>
 </example>
public partial class @Player_Controller: IInputActionCollection2, IDisposable
{
     <summary>
     Provides access to the underlying asset instance.
     </summary>
    public InputActionAsset asset { get; }

     <summary>
     Constructs a new instance.
     </summary>
    public @Player_Controller()
    {
        asset = InputActionAsset.FromJson(@"{
    ""version"": 1,
    ""name"": ""Player_Controller"",
    ""maps"": [
        {
            ""name"": ""Movement_M"",
            ""id"": ""042f8de8-22a5-45cd-ba75-d5750bcd5b46"",
            ""actions"": [
                {
                    ""name"": ""Movement_Key"",
                    ""type"": ""Value"",
                    ""id"": ""f4bc95b2-c779-41eb-be35-c79dfb12d2d2"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""629fd8a7-1aa7-4c97-8107-69931c1480fc"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement_Key"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""bee2722e-50c0-4a89-a1b8-22d7180c4abe"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement_Key"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""e28b51a8-df20-4d35-9f3d-6881c98822b4"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement_Key"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""05137f28-0c61-4076-8c27-5849c4c5dbb3"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement_Key"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""2dbc2978-df58-4e52-89ab-256f4ef86fad"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement_Key"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": []
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": []
        }
    ]
}");
        // Movement_M
        m_Movement_M = asset.FindActionMap("Movement_M", throwIfNotFound: true);
        m_Movement_M_Movement_Key = m_Movement_M.FindAction("Movement_Key", throwIfNotFound: true);
    }

    ~@Player_Controller()
    {
        UnityEngine.Debug.Assert(!m_Movement_M.enabled, "This will cause a leak and performance issues, Player_Controller.Movement_M.Disable() has not been called.");
    }

     <summary>
     Destroys this asset and all associated <see cref="InputAction"/> instances.
     </summary>
    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

     <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindingMask" />
    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

     <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.devices" />
    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

     <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.controlSchemes" />
    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

     <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Contains(InputAction)" />
    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

     <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.GetEnumerator()" />
    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

     <inheritdoc cref="IEnumerable.GetEnumerator()" />
    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

     <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Enable()" />
    public void Enable()
    {
        asset.Enable();
    }

     <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Disable()" />
    public void Disable()
    {
        asset.Disable();
    }

     <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindings" />
    public IEnumerable<InputBinding> bindings => asset.bindings;

     <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindAction(string, bool)" />
    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

     <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindBinding(InputBinding, out InputAction)" />
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

     Movement_M
    private readonly InputActionMap m_Movement_M;
    private List<IMovement_MActions> m_Movement_MActionsCallbackInterfaces = new List<IMovement_MActions>();
    private readonly InputAction m_Movement_M_Movement_Key;
     <summary>
     Provides access to input actions defined in input action map "Movement_M".
     </summary>
    public struct Movement_MActions
    {
        private @Player_Controller m_Wrapper;

         <summary>
         Construct a new instance of the input action map wrapper class.
         </summary>
        public Movement_MActions(@Player_Controller wrapper) { m_Wrapper = wrapper; }
         <summary>
         Provides access to the underlying input action "Movement_M/Movement_Key".
         </summary>
        public InputAction @Movement_Key => m_Wrapper.m_Movement_M_Movement_Key;
         <summary>
         Provides access to the underlying input action map instance.
         </summary>
        public InputActionMap Get() { return m_Wrapper.m_Movement_M; }
         <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
         <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
         <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
         <summary>
         Implicitly converts an <see ref="Movement_MActions" /> to an <see ref="InputActionMap" /> instance.
         </summary>
        public static implicit operator InputActionMap(Movement_MActions set) { return set.Get(); }
         <summary>
         Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
         </summary>
         <param name="instance">Callback instance.</param>
         <remarks>
         If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
         </remarks>
         <seealso cref="Movement_MActions" />
        public void AddCallbacks(IMovement_MActions instance)
        {
            if (instance == null || m_Wrapper.m_Movement_MActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Movement_MActionsCallbackInterfaces.Add(instance);
            @Movement_Key.started += instance.OnMovement_Key;
            @Movement_Key.performed += instance.OnMovement_Key;
            @Movement_Key.canceled += instance.OnMovement_Key;
        }

         <summary>
         Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
         </summary>
         <remarks>
         Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
         </remarks>
         <seealso cref="Movement_MActions" />
        private void UnregisterCallbacks(IMovement_MActions instance)
        {
            @Movement_Key.started -= instance.OnMovement_Key;
            @Movement_Key.performed -= instance.OnMovement_Key;
            @Movement_Key.canceled -= instance.OnMovement_Key;
        }

         <summary>
         Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="Movement_MActions.UnregisterCallbacks(IMovement_MActions)" />.
         </summary>
         <seealso cref="Movement_MActions.UnregisterCallbacks(IMovement_MActions)" />
        public void RemoveCallbacks(IMovement_MActions instance)
        {
            if (m_Wrapper.m_Movement_MActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

         <summary>
         Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
         </summary>
         <remarks>
         If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
         </remarks>
         <seealso cref="Movement_MActions.AddCallbacks(IMovement_MActions)" />
         <seealso cref="Movement_MActions.RemoveCallbacks(IMovement_MActions)" />
         <seealso cref="Movement_MActions.UnregisterCallbacks(IMovement_MActions)" />
        public void SetCallbacks(IMovement_MActions instance)
        {
            foreach (var item in m_Wrapper.m_Movement_MActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Movement_MActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
     <summary>
     Provides a new <see cref="Movement_MActions" /> instance referencing this action map.
     </summary>
    public Movement_MActions @Movement_M => new Movement_MActions(this);
    private int m_KeyboardSchemeIndex = -1;
     <summary>
     Provides access to the input control scheme.
     </summary>
     <seealso cref="UnityEngine.InputSystem.InputControlScheme" />
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
     <summary>
     Provides access to the input control scheme.
     </summary>
     <seealso cref="UnityEngine.InputSystem.InputControlScheme" />
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
     <summary>
     Interface to implement callback methods for all input action callbacks associated with input actions defined by "Movement_M" which allows adding and removing callbacks.
     </summary>
     <seealso cref="Movement_MActions.AddCallbacks(IMovement_MActions)" />
     <seealso cref="Movement_MActions.RemoveCallbacks(IMovement_MActions)" />
    public interface IMovement_MActions
    {
         <summary>
         Method invoked when associated input action "Movement_Key" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
         </summary>
         <seealso cref="UnityEngine.InputSystem.InputAction.started" />
         <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
         <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMovement_Key(InputAction.CallbackContext context);
    }
}
*/